// Top-level build file where you can add configuration options common to all sub-projects/modules.

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:2.3.3'

        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}

allprojects {
    repositories {
        jcenter()
    }

    task resolveDeps(dependsOn:'clean') << {
        def outputs = buildDir.getPath() + '/outputs/'
        configurations.compile.getAllDependencies().withType(ProjectDependency).findAll {

            // seperate libs
            Project proj = project(':' + it.getName())
            proj.configurations.compile.filter {
                def arrName = it.getName()
                if (!arrName.endsWith('.aar')
                        && !arrName.endsWith('.jar')) {
                    return false
                }
                return !arrName.startsWith(proj.getName()) && arrName.startsWith('play-services')
            }.collect {
                def libName = it.getName()
                def libPath = it.getPath()

                def containsLib = false

                for (File commonFile: file(outputs + '/common/').listFiles()) {
                    if (commonFile.getName().equals(libName)) {
                        containsLib = true
                        return
                    }
                }

                if (!containsLib) {
                    for (File subDir : file(outputs + '/libs/').listFiles()) {
                        if (subDir.isDirectory()) {
                            for (File libFile : subDir.listFiles()) {
                                if (libFile.getName().equals(libName)) {
                                    containsLib = true
                                    break
                                }
                            }
                            if (containsLib) {
                                break
                            }
                        }
                    }
                }

                if (containsLib) {
                    copy {
                        from libPath
                        into outputs + '/common/'
                    }
                    file(outputs + '/libs/').listFiles().each {
                        file(it.getPath()).listFiles().each {
                            if (it.getName().equals(libName)) {
                                delete it.getPath()
                                return
                            }
                        }
                    }
                } else {
                    copy {
                        from libPath
                        into outputs + '/libs/' + proj.getName()
                    }
                }
            }
        }

        // unzip jars
        fileTree(outputs).filter {
            return it.getName().endsWith('.aar')
        }.each {
            def arrName = it.getName()
            def arrPath = it.getPath()
            def parentPath = it.getParent()
            copy {
                from zipTree(arrPath)
                into parentPath
                include 'classes.jar'
                rename '.*.jar', arrName.substring(0, arrName.length() - 4) + '.jar'
            }
            delete it
        }

    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}
